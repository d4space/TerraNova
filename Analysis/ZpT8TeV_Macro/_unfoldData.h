// Default Matrix SF=1.1 with all cuts
// =============================================================================
float Response_GenSmearData[18][18] = 
{
  {1.24259, -0.102575, 0.0103584, -0.00115139, 0.000150564, -1.82719e-05, 2.42367e-06, -3.0835e-07, 1.16639e-08, -4.29844e-11, -1.42954e-08, 8.53425e-08, -3.77785e-09, 1.67284e-10, 7.82901e-10, -3.9397e-08, 1.9091e-06, -5.76317e-05}, 
  {-0.270792, 1.25524, -0.140212, 0.0152896, -0.00197192, 0.000239331, -3.17696e-05, 4.04202e-06, -1.52888e-07, 5.59446e-10, 1.87753e-07, -1.13298e-06, 5.01536e-08, -2.21269e-09, -1.05992e-08, 5.33272e-07, -2.58416e-05, 0.000780104}, 
  {0.0318999, -0.168253, 1.27164, -0.15279, 0.0172728, -0.00206583, 0.000276247, -3.5214e-05, 1.33132e-06, -3.87021e-09, -1.69187e-06, 1.12922e-05, -4.99906e-07, 2.22329e-08, 9.60436e-08, -4.8364e-06, 0.000234369, -0.0070751}, 
  {-0.00379246, 0.0176513, -0.155796, 1.27457, -0.161609, 0.0185576, -0.00246237, 0.000315089, -1.19237e-05, 2.24137e-08, 1.54396e-05, -9.43395e-05, 4.17685e-06, -2.12486e-07, -3.9627e-09, 6.08258e-07, -2.87148e-05, 0.000866807}, 
  {0.000161773, -0.00198345, 0.0158209, -0.149869, 1.28753, -0.166018, 0.0209634, -0.00264249, 0.000100318, -7.67662e-07, -9.7935e-05, 2.61608e-05, -1.14429e-06, 1.27166e-07, -9.54599e-10, -1.98019e-07, 2.92534e-06, -8.8024e-05}, 
  {-6.68589e-05, 0.000136397, -0.001881, 0.0158084, -0.154453, 1.28366, -0.174382, 0.020048, -0.000750574, 2.76203e-05, 1.37021e-05, -9.47456e-05, 4.19539e-06, -2.21962e-07, -1.22529e-08, 1.04032e-06, -4.17761e-07, 1.04686e-05}, 
  {2.7113e-05, -0.000102454, 0.000201129, -0.00174512, 0.0150778, -0.148342, 1.30481, -0.175294, 0.00622859, -0.000230993, 8.63137e-06, 1.06382e-05, -4.7494e-07, 9.58686e-08, 1.68169e-07, -8.57838e-06, 6.27238e-07, -1.14526e-06}, 
  {1.7926e-06, -1.0072e-05, -7.31856e-05, 0.000157812, -0.00184361, 0.0156901, -0.163139, 1.2943, -0.0532774, 0.00201181, -8.84021e-05, 1.48248e-06, -3.16592e-08, -6.24998e-07, -1.4459e-06, 7.33709e-05, -5.06164e-06, 6.31549e-07}, 
  {7.60678e-06, -2.34802e-05, 2.41301e-05, -8.40067e-05, 6.38663e-05, -0.00163929, 0.0143532, -0.139165, 1.07268, -0.0450072, 0.00200867, -5.97906e-05, 1.88052e-06, 1.40092e-05, 2.90561e-05, -0.00147723, 0.000101643, -4.65151e-06}, 
  {-4.69115e-05, -5.78186e-05, -9.85692e-05, -0.000146998, -0.00012736, 1.65299e-05, -0.000388658, 0.00277807, -0.0252463, 1.07588, -0.0538161, 0.00162413, -5.2161e-05, -0.00035313, 1.29877e-05, 3.39783e-05, -2.35596e-06, 6.52316e-07}, 
  {7.37658e-06, -2.56119e-05, 1.27009e-05, -4.91029e-05, -6.02065e-05, -3.53569e-05, -1.13108e-05, -0.0003335, 0.000398844, -0.0332429, 1.0877, -0.035981, 0.00143125, -0.000854237, 3.3114e-05, -2.46183e-06, 1.7172e-07, -7.81927e-08}, 
  {-2.26282e-07, 9.43671e-07, -7.76591e-07, 5.58173e-06, -3.03274e-05, -4.16973e-05, 4.86047e-06, 2.47211e-05, -0.000121001, 0.000569541, -0.0364032, 1.05368, -0.0466716, 0.00227861, -8.83029e-05, 5.26808e-06, -3.62605e-07, 2.04302e-08}, 
  {4.23045e-09, -1.76424e-08, 1.45188e-08, -1.04353e-07, 5.66985e-07, 7.79552e-07, -9.08689e-08, -4.62172e-07, 2.26218e-06, -1.06479e-05, 0.000680575, -0.019699, 1.07698, -0.0608887, 0.00235954, -0.000136323, 9.37952e-06, -4.16948e-07}, 
  {-1.27715e-10, 5.32614e-10, -4.38313e-10, 3.15036e-09, -1.7117e-08, -2.35342e-08, 2.74328e-09, 1.39527e-08, -6.82938e-08, 3.21453e-07, -2.05462e-05, 0.000594702, -0.0325133, 1.09341, -0.0423715, 0.00244798, -0.000168429, 7.48575e-06}, 
  {3.29414e-12, -1.37376e-11, 1.13053e-11, -8.12569e-11, 4.41496e-10, 6.07015e-10, -7.0757e-11, -3.5988e-10, 1.76149e-09, -8.29118e-09, 5.29945e-07, -1.53391e-05, 0.000838611, -0.0342954, 1.0613, -0.0613157, 0.00421873, -0.000187499}, 
  {-6.74029e-14, 2.81092e-13, -2.31324e-13, 1.66264e-12, -9.03365e-12, -1.24204e-11, 1.44779e-12, 7.36369e-12, -3.60427e-11, 1.6965e-10, -1.08435e-08, 3.1386e-07, -1.71592e-05, 0.000701734, -0.0217158, 1.08246, -0.0744768, 0.00331008}, 
  {1.41932e-15, -5.91905e-15, 4.87106e-15, -3.50106e-14, 1.90225e-13, 2.61541e-13, -3.04867e-14, -1.55059e-13, 7.58963e-13, -3.57237e-12, 2.28334e-10, -6.60904e-09, 3.61327e-07, -1.47766e-05, 0.000457275, -0.0227937, 1.10497, -0.0491098}, 
  {-4.47431e-17, 1.86593e-16, -1.53557e-16, 1.10368e-15, -5.99668e-15, -8.24488e-15, 9.61069e-16, 4.88813e-15, -2.39258e-14, 1.12616e-13, -7.19806e-12, 2.08345e-10, -1.13906e-08, 4.65822e-07, -1.44153e-05, 0.000718553, -0.0348334, 1.05155} 

};


void applyMatrix(TH1F* outHist, TH1F* inputHist)
{
  //std::cout << "MATRIX UNFOLDING\n";
	for(int uF1=0; uF1<18; uF1++){
		float binSum=0;
		float binErr=0;
		for(int uF2=0; uF2<18; uF2++)
		{
			binSum+=Response_GenSmearData[uF1][uF2]*inputHist->GetBinContent(uF2+1);
			//binErr+=Response_GenSmearData[uF1][uF2]*Response_GenSmearData[uF1][uF2]*inputHist->GetBinContent(uF2+1);
                        binErr+=Response_GenSmearData[uF1][uF2]*Response_GenSmearData[uF1][uF2]*inputHist->GetBinError(uF2+1)*inputHist->GetBinError(uF2+1);
	                //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
		}
		outHist->SetBinContent(uF1+1,binSum);
		float sigma = sqrt(binErr);
                //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
  		outHist->SetBinError(uF1+1,sigma);
	}

}
//============================================================================================
//Inverse with SF = 1.1 madgraph

float Response_GenSmearData_madgraph[18][18] =
{
{1.23985, -0.116906, 0.0119861, -0.00159091, 0.000200147, -1.52474e-05, 1.82086e-06, -2.65887e-07, 8.19613e-10, -1.17967e-11, 6.44122e-13, -9.61631e-15, -5.11278e-13, 2.19706e-14, -7.70422e-16, 3.08157e-17, -1.77932e-18, 8.6796e-20}, 
{-0.267195, 1.26953, -0.146156, 0.016254, -0.0020283, 0.000151081, -1.80079e-05, 2.64242e-06, -6.40546e-09, 4.40061e-11, -2.4013e-12, -5.38637e-15, 4.01468e-12, -1.72518e-13, 6.04954e-15, -2.41972e-16, 1.39716e-17, -6.81544e-19}, 
{0.0304862, -0.168467, 1.2734, -0.157003, 0.018154, -0.00233203, 0.000293482, -3.92069e-05, 6.21266e-07, -2.28005e-08, 1.24538e-09, -3.04521e-11, -3.82105e-10, 1.64198e-11, -5.75777e-13, 2.30302e-14, -1.32978e-15, 6.48673e-17}, 
{-0.00331433, 0.0175828, -0.152625, 1.27858, -0.159069, 0.0187659, -0.00233769, 0.000315944, -4.44896e-06, 1.60274e-07, -8.75426e-09, 2.13051e-10, 2.73748e-09, -1.17635e-10, 4.12498e-12, -1.64993e-13, 9.52681e-15, -4.64722e-16}, 
{0.000355918, -0.00178805, 0.0151099, -0.149926, 1.27935, -0.169743, 0.0201855, -0.00269079, 4.19612e-05, -1.53633e-06, 8.39158e-08, -2.05068e-09, -2.58093e-08, 1.10908e-09, -3.8891e-11, 1.55558e-12, -8.98201e-14, 4.38147e-15}, 
{-0.000130215, 0.000129617, -0.00183111, 0.0157321, -0.15077, 1.29574, -0.172969, 0.0203561, -0.00073247, 2.90901e-05, -1.58896e-06, 3.9594e-08, 4.49633e-07, -1.93216e-08, 6.77532e-10, -2.71002e-11, 1.56479e-12, -7.6331e-14}, 
{2.79084e-05, -7.3994e-05, 0.000253282, -0.00207916, 0.016098, -0.155988, 1.29711, -0.166861, 0.00521924, -0.00020542, 1.12204e-05, -2.79016e-07, -3.2046e-06, 1.37708e-07, -4.82888e-09, 1.93148e-10, -1.11525e-11, 5.44023e-13}, 
{-3.10073e-06, 8.0572e-06, -2.15147e-05, 0.000201294, -0.0020922, 0.0155504, -0.157109, 1.29002, -0.0492068, 0.00196087, -0.000107106, 2.67095e-06, 3.02034e-05, -1.2979e-06, 4.55122e-08, -1.82042e-09, 1.05112e-10, -5.12742e-12}, 
{2.6145e-06, 6.84447e-06, -4.35991e-05, -1.38979e-05, 0.000236323, -0.00173761, 0.0151983, -0.143975, 1.07021, -0.0450305, 0.00245968, -6.20742e-05, -0.000655968, 2.81882e-05, -9.88449e-07, 3.95364e-08, -2.28286e-09, 1.11359e-10}, 
{-8.33366e-05, -2.58469e-05, -8.68567e-05, -5.16679e-05, 1.74026e-05, -2.92822e-05, -0.000459012, 0.00333721, -0.0257641, 1.07393, -0.0586725, 0.00179463, -0.000405566, 1.7428e-05, -6.1113e-07, 2.44442e-08, -1.41143e-09, 6.88501e-11}, 
{2.40753e-06, 9.98941e-07, 6.15573e-07, 2.0518e-05, -0.000124017, -0.000275627, 6.24363e-05, -0.000192976, 0.000364104, -0.0313368, 1.09418, -0.0360876, 0.00170038, -7.30688e-05, 2.56223e-06, -1.02485e-07, 5.91758e-09, -2.88662e-10}, 
{2.74743e-07, -1.70687e-06, 1.4658e-05, -0.000123356, 3.11411e-05, -9.17223e-05, 4.52861e-05, -0.000274501, -0.000134827, 0.000662178, -0.0386201, 1.05489, -0.0494231, 0.0021238, -7.44734e-05, 2.97882e-06, -1.71999e-07, 8.3902e-09}, 
{-5.49325e-09, 3.41274e-08, -2.93073e-07, 2.4664e-06, -6.22639e-07, 1.83391e-06, -9.05455e-07, 5.48841e-06, 2.69574e-06, -1.32397e-05, 0.000772174, -0.0210915, 1.07731, -0.0462943, 0.00162336, -6.49318e-05, 3.74921e-06, -1.82888e-07}, 
{1.52114e-10, -9.45026e-10, 8.11553e-09, -6.82974e-08, 1.72416e-08, -5.0783e-08, 2.50731e-08, -1.5198e-07, -7.46482e-08, 3.66621e-07, -2.13824e-05, 0.000584048, -0.0298321, 1.09079, -0.0382496, 0.00152992, -8.83388e-05, 4.30921e-06}, 
{-6.62484e-12, 4.11575e-11, -3.53445e-10, 2.97447e-09, -7.50901e-10, 2.21169e-09, -1.09198e-09, 6.61901e-09, 3.25106e-09, -1.5967e-08, 9.3124e-07, -2.54363e-05, 0.00129924, -0.0475056, 1.05715, -0.0422845, 0.00244154, -0.000119099}, 
{1.32849e-13, -8.25335e-13, 7.08766e-12, -5.96473e-11, 1.50579e-11, -4.43511e-11, 2.18975e-11, -1.32731e-10, -6.51937e-11, 3.20187e-10, -1.86742e-08, 5.10076e-07, -2.60537e-05, 0.000952633, -0.0211992, 1.0787, -0.0622849, 0.00303829}, 
{-4.87556e-15, 3.02899e-14, -2.60118e-13, 2.18906e-12, -5.52626e-13, 1.62769e-12, -8.0364e-13, 4.87126e-12, 2.39262e-12, -1.17509e-11, 6.85346e-10, -1.87198e-08, 9.56175e-07, -3.49617e-05, 0.000778013, -0.0395885, 1.10761, -0.0540296}, 
{2.09878e-16, -1.30389e-15, 1.11973e-14, -9.42325e-14, 2.37889e-14, -7.00672e-14, 3.45943e-14, -2.09693e-13, -1.02995e-13, 5.05841e-13, -2.95021e-11, 8.05832e-10, -4.11604e-08, 1.505e-06, -3.34911e-05, 0.00170416, -0.0476791, 1.05111} 

};

void applyMatrixMAD(TH1F* outHist, TH1F* inputHist)
{  //std::cout << "MATRIX UNFOLDING\n";
        for(int uF1=0; uF1<18; uF1++){                
                float binSum=0;
                float binErr=0;
                for(int uF2=0; uF2<18; uF2++)
                {
                        binSum+=Response_GenSmearData_madgraph[uF1][uF2]*inputHist->GetBinContent(uF2+1);
                        //binErr+=Response_GenSmearData[uF1][uF2]*Response_GenSmearData[uF1][uF2]*inputHist->GetBinContent(uF2+1);
                        binErr+=Response_GenSmearData_madgraph[uF1][uF2]*Response_GenSmearData_madgraph[uF1][uF2]*inputHist->GetBinError(uF2+1)*inputHist->GetBinError(uF2+1);
                        //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
                }
                outHist->SetBinContent(uF1+1,binSum);                
                float sigma = sqrt(binErr);
                //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
                outHist->SetBinError(uF1+1,sigma);
        }
}

//==================================================================================================================
//FSR correction
float Response_GenFSR[18][18] =
{
  {1.11888, -0.0243175, -0.00428431, -0.00214093, -0.00111603, -0.00085642, -0.000373946, -0.000391382, -0.00021799, -3.08905e-05, 5.67193e-06, 6.81917e-07, 1.24194e-07, -1.06458e-08, -1.02555e-09, 7.96987e-11, 5.19027e-07, -3.244e-08}, 
  {-0.0620755, 1.1097, -0.034925, -0.00902808, -0.00418267, -0.0029226, -0.00129111, -0.00145796, -0.00042341, -9.3889e-05, 2.31289e-05, 1.53309e-06, 2.65646e-07, -2.32864e-08, -2.17492e-09, 1.70864e-10, 1.00812e-06, -6.30094e-08}, 
  {-0.02027, -0.0446278, 1.10984, -0.0394113, -0.00967183, -0.00561274, -0.00323182, -0.00201566, -0.00126398, -0.000326214, -0.000282985, 1.45986e-05, 1.45879e-06, -1.70628e-07, -1.0392e-08, 9.70798e-10, 3.00949e-06, -1.88103e-07}, 
  {-0.0133133, -0.0164585, -0.0383672, 1.11667, -0.0408871, -0.0100174, -0.00657932, -0.00370785, -0.00172139, -0.000526938, -0.000176942, 1.65932e-05, 1.70183e-06, -1.96028e-07, -1.22332e-08, 1.13023e-09, 4.09856e-06, -2.56172e-07}, 
  {-0.008101, -0.00911198, -0.0126361, -0.0374106, 1.11536, -0.0417134, -0.0113754, -0.00532819, -0.0022652, -0.000616948, -0.000155894, -6.30188e-05, 5.26814e-06, 1.84494e-07, -6.65871e-08, 2.89715e-09, 5.39355e-06, -3.37127e-07}, 
  {-0.00583214, -0.00581664, -0.00727584, -0.0111225, -0.0338652, 1.11265, -0.0450503, -0.0122951, -0.00349956, -0.00116478, -0.000436355, 3.64303e-05, 3.74768e-06, -4.30919e-07, -2.6967e-08, 2.48836e-09, 8.33232e-06, -5.20796e-07}, 
  {-0.00381155, -0.0038597, -0.00511131, -0.006989, -0.0118491, -0.0296951, 1.11415, -0.0445554, -0.00780782, -0.00127533, -0.000824197, -1.88565e-05, 9.35867e-06, -3.16281e-07, -9.49166e-08, 5.63629e-09, 1.85903e-05, -1.16195e-06}, 
  {-0.00241205, -0.00227894, -0.0035786, -0.00462889, -0.00600415, -0.00963168, -0.0295067, 1.11331, -0.0191842, -0.00203734, -0.000233964, -0.000172226, 2.09126e-05, 1.93214e-07, -2.44759e-07, 1.19105e-08, 4.56775e-05, -2.85497e-06}, 
  {-0.00308447, -0.00307511, -0.00348919, -0.00574657, -0.00760081, -0.011778, -0.0157125, -0.041747, 1.04833, -0.034741, -0.00555286, -0.00172049, -0.000360947, 2.9132e-05, 3.0462e-06, -2.30255e-07, -0.00249604, 0.000156005}, 
  {1.64013e-05, -0.00015879, -0.000137101, -0.000127151, -0.000127408, -0.000354538, -0.000831389, -0.00184102, -0.0118287, 1.04912, -0.0445545, -0.00603968, -0.00168332, 0.000122135, 1.47045e-05, -1.06339e-06, 2.81341e-05, -1.7473e-06}, 
  {2.63887e-06, 4.64652e-06, -1.56116e-05, -4.70179e-05, -2.46805e-05, -3.0465e-05, -0.000201202, 3.14189e-05, -9.90373e-05, -0.00817971, 1.05845, -0.0313148, -0.00166808, 0.000296261, 8.21186e-06, -1.18698e-06, 2.41917e-07, -2.75549e-09}, 
  {6.5562e-07, 1.16185e-06, -2.05086e-05, 3.30937e-06, -3.27469e-05, 3.5337e-06, 2.01553e-06, 1.24744e-06, -2.11527e-05, -0.000127663, -0.0062685, 1.04029, -0.0415651, -0.00521266, 0.000661715, -2.0002e-05, -2.33868e-06, 3.54522e-07}, 
  {5.32295e-07, 6.04554e-07, 1.19263e-06, -2.56218e-05, 2.27773e-06, -4.22097e-05, 1.8698e-06, 5.5421e-07, 1.9459e-07, 1.83218e-07, 6.23221e-06, -0.00103082, 1.04558, -0.0499029, -0.0100757, 0.000640777, 2.35685e-05, -8.14779e-06}, 
  {-1.75214e-10, -1.98999e-10, -3.92576e-10, 8.43387e-09, -7.49754e-10, 1.38941e-08, -6.15477e-10, -1.82428e-10, -6.40526e-11, -6.03094e-11, -2.05144e-09, 3.39313e-07, -0.00034417, 1.05467, -0.0382722, -0.000801978, 0.0002128, -4.94607e-06}, 
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04766, -0.0531323, -0.00296477, 0.00073876}, 
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.05332, -0.0401263, -0.00846415}, 
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04524, -0.0653274}, 
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.07292} 

};


void applyMatrixFSR(TH1F* outHist, TH1F* inputHist)
{
for(int uF1=0; uF1<18; uF1++){
		float binSum=0;
		float binErr=0;
		for(int uF2=0; uF2<18; uF2++)
		{
			binSum+=Response_GenFSR[uF1][uF2]*inputHist->GetBinContent(uF2+1);
			//binErr+=Response_GenSmearData[uF1][uF2]*Response_GenSmearData[uF1][uF2]*inputHist->GetBinContent(uF2+1);
                        binErr+=Response_GenFSR[uF1][uF2]*Response_GenFSR[uF1][uF2]*inputHist->GetBinError(uF2+1)*inputHist->GetBinError(uF2+1);
	                //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
		}
		outHist->SetBinContent(uF1+1,binSum);
		float sigma = sqrt(binErr);
                //if (uF1==0) std::cout << "binErr="<<binErr<<std::endl;
  		outHist->SetBinError(uF1+1,sigma);
	}

}

	
