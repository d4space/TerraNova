#include <stdio>
#include <iostream>

static const int NB = 12;
double Wpt12Bins[13] = {0.0,7.5,12.5,17.5,30,40,50,70,110,150,190,250,600};
double BinWidth[12] ={7.5-0, 12.5-7.5,17.5-12.5, 30.0-17.5, 40.0-30.0, 50.0-40.0, 70.0-50.0, 110.0-70.0, 150.0-110.0, 190.0-150.0, 250.0-190.0, 600.0-250.0};

void ErrPropaNormXsec(double *nn, double *dn, double ff[NB], double df[NB]){

  double ff[NB];
  //double df[NB];
  double dp[NB];

    ///Here is error propagation
    double NN=0;
    for(int i=0; i<NB; ++i) NN+=nn[i];
    for(int i=0; i<NB; ++i) {
        ff[i]=nn[i]/NN;
        dp[i]=dn[i]/NN;
        df[i]=0;
    }
    for(int i=0; i<NB; ++i){
        df[i] = pow( (1-ff[i])*dp[i], 2);
        for(int j=0; j<NB; ++j){
            if(j!=i) df[i]+=ff[i]*ff[i]*dp[j]*dp[j];
        }
        df[i]=sqrt(df[i]);
    }
    
    for(int i=0; i<NB; ++i){
        //cout << Form("%.8f  prop=%.8f", ff[i]/BinWidth[i], df[i]/BinWidth[i]) << endl;
        cout << Form("%.8f  prop=%.8f", ff[i], df[i]) << endl; // Print Normalized Xsec and TotalUncer.
    }
}

int MakeRoot_WpTincl_FEWZ()
{
  // cross-section and errors
  double Xsec[13] = {0.,};
  double Error[13] = {0.,};
    Xsec[0] =  2364.16 ;  
    Xsec[1] =  1348.76 ;
    Xsec[2] =  770.279 ;
    Xsec[3] =  583.876 ;
    Xsec[4] =  350.151 ;
    Xsec[5] =  359.439 ;
    Xsec[6] =  206.015 ;
    Xsec[7] =  205.64  ;
    Xsec[8] =  130.124 ;
    Xsec[9] =  33.8691 ;
    Xsec[10] = 10.8373 ;
    Xsec[11] = 5.4068  ;
    Xsec[12] = 2.52383 ;

    Error[0] =  231.983  ; 
    Error[1] =  88.8633  ;
    Error[2] =  49.5411  ;
    Error[3] =  38.3767  ;
    Error[4] =  23.8739  ;
    Error[5] =  25.052   ;
    Error[6] =  14.4995  ;
    Error[7] =  15.0403  ;
    Error[8] =  10.0958  ;
    Error[9] =  2.9052   ;
    Error[10]=  0.893642 ;
    Error[11]=  0.707101 ;
    Error[12]=  0.35303  ;

  double Xsec_12bin[13] = {0,};
  double Error_12bin[13] = {0,};

  // Make 12 bin
  for(int i(0); i<3; i++)
  {
    Xsec_12bin[i] = Xsec[i];
    Error_12bin[i] = Error[i];
  }
  Xsec_12bin[3] = Xsec[3]+Xsec[4];
  Error_12bin[3] = sqrt(Error[3]**2 +Error[4]**2); // error : sqrt sum
  for(int i(4); i<13; i++)
  {
    Xsec_12bin[i] = Xsec[i+1];
    Error_12bin[i] = Error[i+1];
  }

  // 12Bin print and check
  for(int i(0); i<12; i++)
  {
    printf("Xsec_12 %d : %.8f, Error_12 : %.8f \n",i, Xsec_12bin[i], Error_12bin[i]);
  }

  // Calculate 12bin NormXsec and Errors
  double NormXsec_12bin[12];
  double NormError_12bin[12];
  ErrPropaNormXsec(Xsec_12bin, Error_12bin, NormXsec_12bin, NormError_12bin); 
  
  // Normalized 12Bin  print and check
  for(int i(0); i<12; i++)
  {
    printf("NormXsec_12 %d : %.8f, Error_12 : %.8f \n",i, NormXsec_12bin[i], NormError_12bin[i]);
  }

  // Make Normalized Differential 12 bin
  double NormDiffXsec_12bin[12];
  double NormDiffError_12bin[12];
  for(int i(0); i<12; i++)
  {
    NormDiffXsec_12bin[i] = NormXsec_12bin[i] / BinWidth[i] ;
    NormDiffError_12bin[i] = NormError_12bin[i] / BinWidth[i] ;
    printf("NormDiffXsec_12 %d : %.8f, Error_12 : %.8f \n",i, NormDiffXsec_12bin[i], NormDiffError_12bin[i]);
  }

  // Make histogram
  TH1D* Xsec_FEWZ_13bin = new TH1D("Xsec_FEWZ_13bin","Xsec_FEWZ_13bin",13,0,600);
  TH1D* NormXsec_FEWZ_12bin = new TH1D("NormXsec_FEWZ_12bin","NormXsec_FEWZ_12bin",12,0,600);
  TH1D* NormDiffXsec_FEWZ_12bin = new TH1D("NormDiffXsec_FEWZ_12bin","NormDiffXsec_FEWZ_12bin",12,0,600);

  for(int i(0); i<13; i++)
  {
    Xsec_FEWZ_13bin->SetBinContent(i+1,Xsec[i]);
    Xsec_FEWZ_13bin->SetBinError(i+1,Error[i]);
  }

  for(int i(0); i<12; i++)
  {
    NormXsec_FEWZ_12bin->SetBinContent(i+1,NormXsec_12bin[i]);
    NormXsec_FEWZ_12bin->SetBinError(i+1,NormError_12bin[i]);
    
    NormDiffXsec_FEWZ_12bin->SetBinContent(i+1,NormDiffXsec_12bin[i]);
    NormDiffXsec_FEWZ_12bin->SetBinError(i+1,NormDiffError_12bin[i]);
  }

  TFile* fFEWZ = new TFile("./root/WinclToMuNu_FEWZ.root","recreate");
  Xsec_FEWZ_13bin->Write();
  NormXsec_FEWZ_12bin->Write();
  NormDiffXsec_FEWZ_12bin->Write();
  
  return 0;

}

